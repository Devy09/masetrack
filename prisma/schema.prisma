generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                     @id @default(autoincrement())
  email           String                  @unique
  password        String
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  batch           String
  name            String
  role            String
  status          String
  image           String?
  address         String?
  phoneNumber     String?
  remarksAuthored CertificateRemark[]     @relation("UserRemarks")
  submissions     CertificateSubmission[]
  granteesAdded   Grantee[]               @relation("PersonnelGrantees")
  granteeRecord   Grantee?
  polls           Poll[]
  votes           Vote[]
}

model Grantee {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  batch       String
  phoneNumber String?
  address     String?
  status      String   @default("active")
  image       String?
  userId      Int      @unique
  addedById   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  addedBy     User     @relation("PersonnelGrantees", fields: [addedById], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CertificateSubmission {
  id          Int                 @id @default(autoincrement())
  title       CertificateTitle
  semester    Semester            @default(FIRST)
  description String?
  status      String              @default("pending")
  isActive    Boolean             @default(true)
  userId      Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  mpTags      String[]
  files       CertificateFile[]
  remarks     CertificateRemark[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CertificateFile {
  id           Int                   @id @default(autoincrement())
  submissionId Int
  fileName     String
  fileUrl      String
  fileSize     Int
  fileType     String
  createdAt    DateTime              @default(now())
  submission   CertificateSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model CertificateRemark {
  id           Int                   @id @default(autoincrement())
  submissionId Int
  authorId     Int
  authorRole   String
  content      String
  createdAt    DateTime              @default(now())
  author       User                  @relation("UserRemarks", fields: [authorId], references: [id], onDelete: Cascade)
  submission   CertificateSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Poll {
  id          Int          @id @default(autoincrement())
  question    String
  description String?
  isActive    Boolean      @default(true)
  createdById Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  options     PollOption[]
  votes       Vote[]
}

model PollOption {
  id        Int      @id @default(autoincrement())
  text      String
  pollId    Int
  createdAt DateTime @default(now())
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes     Vote[]
}

model Vote {
  id        Int        @id @default(autoincrement())
  pollId    Int
  optionId  Int
  userId    Int
  createdAt DateTime   @default(now())
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId])
}

enum CertificateTitle {
  ENROLLMENT
  GRADES
}

enum Semester {
  FIRST
  SECOND
}
